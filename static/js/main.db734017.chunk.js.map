{"version":3,"sources":["DrumPad.js","sounds.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","audioEl","useRef","playSound","current","play","setDescription","description","useEffect","pressedKey","toUpperCase","letter","setPressedKey","className","onClick","id","src","source","ref","sounds","App","useState","handleKeyPress","event","console","log","keyCode","which","key","String","fromCharCode","window","addEventListener","removeEventListener","map","sound","index","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PA+BeA,MA3Bf,SAAiBC,GACf,IAAMC,EAAUC,iBAAO,MAEjBC,EAAY,WAChBF,EAAQG,QAAQC,OAChBL,EAAMM,eAAeN,EAAMO,cAa7B,OAVAC,qBAAU,WACJR,EAAMS,WAAWC,gBAAkBV,EAAMW,SAC3CR,IACAH,EAAMY,cAAc,OAGrB,CAACZ,EAAMS,aAKR,yBAAKI,UAAU,YACb,4BAAQC,QAASX,GAAYH,EAAMW,QACnC,2BAAOI,GAAIf,EAAMW,OAAQK,IAAKhB,EAAMiB,OAAQC,IAAKjB,EAASY,UAAU,WCzB7DM,EAAS,CACpB,CACER,OAAQ,IACRM,OAAQ,6GACRV,YAAa,UAGf,CACEI,OAAQ,IACRM,OAAQ,+GACRV,YAAa,SAGf,CACEI,OAAQ,IACRM,OAAQ,8GACRV,YAAa,SAGf,CACEI,OAAQ,IACRM,OAAQ,+GACRV,YAAa,WAGf,CACEI,OAAQ,IACRM,OAAQ,6GACRV,YAAa,QAGf,CACEI,OAAQ,IACRM,OAAQ,4GACRV,YAAa,SAGf,CACEI,OAAQ,IACRM,OAAQ,qHACRV,YAAa,SAGf,CACEI,OAAQ,IACRM,OAAQ,oHACRV,YAAa,QAGf,CACEI,OAAQ,IACRM,OAAQ,sIACRV,YAAa,SCAFa,MA/Cf,WAAgB,IAAD,EAEyBC,mBAAS,IAFlC,mBAENd,EAFM,KAEOD,EAFP,OAGuBe,mBAAS,IAHhC,mBAGNZ,EAHM,KAGMG,EAHN,KAKPU,EAAiB,SAACC,GACtBC,QAAQC,IAAI,qBACZ,IAAMC,EAAUH,EAAMI,OAASJ,EAAMG,QAC/BE,EAAMC,OAAOC,aAAaJ,GAChCd,EAAcgB,IAahB,OATApB,qBAAU,WAGR,OAFAuB,OAAOC,iBAAiB,WAAYV,GAE7B,WACLS,OAAOE,oBAAoB,WAAYX,MAExC,IAID,yBAAKP,GAAG,OACN,yBAAKA,GAAG,gBACN,6CACA,yBAAKA,GAAG,YACLI,EAAOe,KAAI,SAACC,EAAOC,GAClB,OAAO,kBAAC,EAAD,CACLR,IAAKQ,EACLzB,OAAQwB,EAAMxB,OACdM,OAAQkB,EAAMlB,OACdV,YAAa4B,EAAM5B,YACnBD,eAAgBA,EAChBG,WAAYA,EACZG,cAAeA,QAKrB,uBAAGG,GAAG,WAAWR,MCjCL8B,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.db734017.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nimport './App.css';\r\n\r\nfunction DrumPad(props) {\r\n  const audioEl = useRef(null);\r\n\r\n  const playSound = () => {\r\n    audioEl.current.play()\r\n    props.setDescription(props.description)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.pressedKey.toUpperCase() === props.letter) {\r\n      playSound()\r\n      props.setPressedKey('')\r\n    }\r\n\r\n  }, [props.pressedKey])\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"drum-pad\">\r\n      <button onClick={playSound}>{props.letter}</button>\r\n      <audio id={props.letter} src={props.source} ref={audioEl} className=\"clip\"></audio>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrumPad;\r\n","export const sounds = [\r\n  {\r\n    letter: 'Q',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Basic/2[kb]claves.aif.mp3',\r\n    description: 'claves'\r\n  },\r\n\r\n  {\r\n    letter: 'W',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Basic/4[kb]cl_hihat.aif.mp3',\r\n    description: 'hihat'\r\n  },\r\n\r\n  {\r\n    letter: 'E',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Basic/22[kb]conga1.aif.mp3',\r\n    description: 'conga'\r\n  },\r\n\r\n  {\r\n    letter: 'A',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Basic/29[kb]cowbell.aif.mp3',\r\n    description: 'cowbell'\r\n  },\r\n\r\n  {\r\n    letter: 'S',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Basic/74[kb]kick2.aif.mp3',\r\n    description: 'kick'\r\n  },\r\n\r\n  {\r\n    letter: 'D',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Basic/8[kb]snare.aif.mp3',\r\n    description: 'snare'\r\n  },\r\n\r\n  {\r\n    letter: 'Z',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Extended/297[kb]808-cym02.wav.mp3',\r\n    description: 'crash'\r\n  },\r\n\r\n  {\r\n    letter: 'X',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/808%20Extended/255[kb]808-bd15.wav.mp3',\r\n    description: 'deep'\r\n  },\r\n\r\n  {\r\n    letter: 'C',\r\n    source: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/DRUM%20MACHINES/Ace%20Tone%20Rhythm%20Ace%20FR-1/22[kb]ace-per01.wav.mp3',\r\n    description: 'snap'\r\n  },\r\n\r\n]\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport DrumPad from './DrumPad';\nimport { sounds } from './sounds';\nimport './App.css';\n\nfunction App() {\n\n  const [description, setDescription] = useState('');\n  const [pressedKey, setPressedKey] = useState('');\n\n  const handleKeyPress = (event) => {\n    console.log('in event listener')\n    const keyCode = event.which || event.keyCode\n    const key = String.fromCharCode(keyCode)\n    setPressedKey(key)\n\n  }\n\n  useEffect(() => {\n    window.addEventListener('keypress', handleKeyPress);\n\n    return () => {\n      window.removeEventListener('keypress', handleKeyPress);\n    };\n  }, [])\n\n\n  return (\n    <div id=\"App\">\n      <div id=\"drum-machine\">\n        <h2>beatMaker2000</h2>\n        <div id=\"drum-pad\">\n          {sounds.map((sound, index) => {\n            return <DrumPad\n              key={index}\n              letter={sound.letter}\n              source={sound.source}\n              description={sound.description}\n              setDescription={setDescription}\n              pressedKey={pressedKey}\n              setPressedKey={setPressedKey}\n            />\n          })}\n        </div>\n\n        <p id='display'>{description}</p>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}